%% Case Study 3: Classifying Handwritten Digits
%% Part 2: Single Boolean Classifier
% *ESE 105*
% 
% *Name: Minh Duc Nguyen, Hussain Albotabeekh, Shaaf Afzal, Fataiya Salifu*
%

clear;
close all;
load mnist-testing.mat;
load mnist-training.mat;


%% Step 1: Initial Simple Binary Classifier

%%%
% CODE: *************************************************************
% Set up rng seed (for replicability)
rng = 28;

% Choose a random class (K) to establish boundaries
K = 0; 

% Set up flattened images again + isolate all images w/ K label
trainImagesVector = zeros((28*28), size(trainImages, 3));
for i = 1:length(trainImages)
    trainImagesVector(:, i) = reshape(trainImages(:, :, i), [(28*28), 1]);
end

allK = trainImagesVector(:, trainLabels == K);

% Take the sum of all pixel values across all K-label images (intensity)
allKSum = sum(allK, 2);

% Select only pixel values above a certain value (to ignore outliers); set
% respective pixels to either 1 or 0 to create a boolean matrix
val = mean(allKSum);   % Threshold set to the mean to account for outliers
allKSum = allKSum >= val;

% Plot the boundaries matrix 
figure;
colormap("gray");
imagesc(reshape(allKSum, [28, 28]));

% Create threshold + binary classifier
Wk = allKSum;
% Threshold set to be the mean of the outputs 
T = mean(Wk'*trainImagesVector(:, trainLabels == K));
predictedLabels = zeros(length(trainImagesVector), 1);
correctCount = 0;
for i = 1:size(trainImagesVector, 2)
    x = trainImagesVector(:, i);
    FkX = Wk'*x;
    % Test if label is K or not + if true label is K or not
    predictedLabels(i) = FkX >= T;   % 1 if predicted to be K, else set as 0
    trueLabel = trainLabels(i) == K;
    if(predictedLabels(i) == trueLabel) 
        correctCount = correctCount + 1;
    end
end

% Display results
disp("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
disp("Overall Acccuracy: " + (correctCount/size(trainImagesVector, 2))*100 + "%");
trueLabels = double(trainLabels == K);
figure;
confusionchart(trueLabels, predictedLabels, "Title", "Confusion Matrix for K = " + K);
confMat = confusionmat(trueLabels, predictedLabels);   % For rate purposes
disp("Error Rate: " + (confMat(1, 2) + confMat(2, 1))*100/size(trainImagesVector, 2) + "%");
disp("True Positive Rate: " + (confMat(2, 2)/sum(confMat(2, :)))*100 + "%");
disp("True Negative Rate: " + (confMat(1, 1)/sum(confMat(1, :)))*100 + "%");
disp("False Positive Rate: " + (confMat(1, 2)*100/sum(confMat(1, :))) + "%");
disp("False Negative Rate: " + (confMat(2, 1)*100/sum(confMat(2, :))) + "%");
% *******************************************************************

%% Step 2: Classifier Modifications (WORK IN PROGRESS)

%%% 
% CODE: *************************************************************
% Note: class (K) is kept the same for now

% Modification 1: edge detection
% Get edges of each image and store in a matrix
edgeAll = zeros(28, 28, size(allK, 2));
for i = 1:size(allK, 2)
    edgeMatrix = edge(reshape(allK(:, i), [28,28]), "canny");
    edgeAll(:, :, i) = edgeMatrix;
end

% Get averaged edge matrix based on individual edge matrices
sumEdges = zeros((28*28), 1);
for i = 1:size(edgeAll, 3)
    curImg = reshape(edgeAll(:, :, i), [(28*28), 1]);
    sumEdges = sumEdges + curImg;
end
sumEdges = sumEdges/max(sumEdges);

% Run threshold to get rid of noise
threshold = 0.7; 
sumEdges = sumEdges >= threshold;
figure;
imagesc(reshape(sumEdges, [28, 28]));







% % Display results
% disp("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
% disp("Overall Acccuracy: " + (correctCount/size(trainImagesVector, 2))*100 + "%");
% trueLabels = double(trainLabels == K);
% figure;
% confusionchart(trueLabels, predictedLabels, "Title", "Confusion Matrix for K = " + K);
% confMat = confusionmat(trueLabels, predictedLabels);   % For rate purposes
% disp("Error Rate: " + (confMat(1, 2) + confMat(2, 1))*100/size(trainImagesVector, 2) + "%");
% disp("True Positive Rate: " + (confMat(2, 2)/sum(confMat(2, :)))*100 + "%");
% disp("True Negative Rate: " + (confMat(1, 1)/sum(confMat(1, :)))*100 + "%");
% disp("False Positive Rate: " + (confMat(1, 2)*100/sum(confMat(1, :))) + "%");
% disp("False Negative Rate: " + (confMat(2, 1)*100/sum(confMat(2, :))) + "%");
% *******************************************************************







% FAILED MODIFICATIONS (less than/equal accuracy):

% ~~~~~~~~~~~~~~~~ FREQUENCY ~~~~~~~~~~~~~~~~~~~~
% % Note: class (K) is kept the same
% % Modification: pixel frequency (rather than pixel intensity)
% 
% % Binarize K-label images + get frequency of nonzero pixels
% allK = allK > 0;
% freq = sum(allK, 2);
% 
% % Normalize frequency matrix
% freq = freq/size(allK, 2);
% 
% % Create boolean boundary matrix (same as previously); threshold set to
% % pixels appearing in at least 40% of images
% threshold = 0.4;
% freqBoundary = freq >= 0.3;
% figure;    % Plotted for reference
% imagesc(reshape(freqBoundary, [28, 28]));
% 
% % Run modified classifier with new parameters/boundaries (same process)
% Wk = double(freqBoundary);
% T = mean(Wk'*trainImagesVector(:, trainLabels == K));
% predictedLabels = zeros(length(trainImagesVector), 1);
% correctCount = 0;
% 
% for i = 1:size(trainImagesVector, 2)
%     x = trainImagesVector(:, i);
%     FkX = Wk'*x;
%     % Test if label is K or not + if true label is K or not
%     predictedLabels(i) = FkX >= T;   % 1 if predicted to be K, else set as 0
%     trueLabel = trainLabels(i) == K;
%     if(predictedLabels(i) == trueLabel) 
%         correctCount = correctCount + 1;
%     end
% end
